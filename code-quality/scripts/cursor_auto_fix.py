#!/usr/bin/env python3
"""
Script para Cursor AI - Valida√ß√£o e corre√ß√£o autom√°tica
Este script deve ser executado pelo Cursor AI quando a valida√ß√£o falha
"""

import subprocess
import sys
from pathlib import Path


def run_command(command, cwd=None):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(command, shell=True, cwd=cwd, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def validate_code():
    """Executa valida√ß√£o completa"""
    print("üîç Validando c√≥digo...")
    success, stdout, stderr = run_command("python scripts/validate_code_quality.py")
    return success, stdout, stderr


def auto_fix_python():
    """Corrige problemas Python automaticamente"""
    print("üêç Corrigindo Python...")

    fixes = []

    # Black
    success, stdout, stderr = run_command("python -m black app/ scripts/ --line-length 100")
    if success:
        fixes.append("‚úÖ Python formatado com Black")
    else:
        fixes.append("‚ùå Erro ao formatar Python com Black")

    # isort
    success, stdout, stderr = run_command("python -m isort app/ scripts/ --profile black")
    if success:
        fixes.append("‚úÖ Imports Python organizados com isort")
    else:
        fixes.append("‚ùå Erro ao organizar imports Python")

    return fixes


def auto_fix_javascript():
    """Corrige problemas JavaScript automaticamente"""
    print("üü® Corrigindo JavaScript...")

    fixes = []

    # Prettier
    success, stdout, stderr = run_command("npm run format", cwd="frontend")
    if success:
        fixes.append("‚úÖ JavaScript formatado com Prettier")
    else:
        fixes.append("‚ùå Erro ao formatar JavaScript com Prettier")

    # ESLint
    success, stdout, stderr = run_command("npm run lint:fix", cwd="frontend")
    if success:
        fixes.append("‚úÖ Linting JavaScript corrigido com ESLint")
    else:
        fixes.append("‚ùå Erro ao corrigir linting JavaScript")

    return fixes


def analyze_remaining_issues(validation_output):
    """Analisa problemas que n√£o podem ser corrigidos automaticamente"""
    issues = []

    if "Arquivos muito grandes encontrados" in validation_output:
        issues.append("üìè Arquivos muito grandes - precisa refatora√ß√£o manual")

    if "Black: C√≥digo n√£o est√° formatado" in validation_output:
        issues.append("üêç Problemas de formata√ß√£o Python - pode precisar refatora√ß√£o")

    if "ESLint: Problemas de linting" in validation_output:
        issues.append("üü® Problemas de linting JavaScript - pode precisar refatora√ß√£o")

    return issues


def main():
    """Fun√ß√£o principal para Cursor AI"""
    print("ü§ñ CURSOR AI - VALIDA√á√ÉO E CORRE√á√ÉO AUTOM√ÅTICA")
    print("=" * 50)

    # 1. Validar c√≥digo inicial
    print("\n1Ô∏è‚É£ VALIDA√á√ÉO INICIAL")
    success, stdout, stderr = validate_code()

    if success:
        print("‚úÖ C√≥digo j√° est√° v√°lido!")
        print("üéâ Cursor AI pode finalizar o c√≥digo.")
        return True

    print("‚ùå C√≥digo n√£o passou na valida√ß√£o!")
    print("üìã Problemas encontrados:")
    print(stdout)

    # 2. Tentar corre√ß√£o autom√°tica
    print("\n2Ô∏è‚É£ CORRE√á√ÉO AUTOM√ÅTICA")

    python_fixes = auto_fix_python()
    js_fixes = auto_fix_javascript()

    all_fixes = python_fixes + js_fixes

    for fix in all_fixes:
        print(f"  {fix}")

    # 3. Validar novamente
    print("\n3Ô∏è‚É£ VALIDA√á√ÉO AP√ìS CORRE√á√ïES")
    success, stdout, stderr = validate_code()

    if success:
        print("‚úÖ C√≥digo passou na valida√ß√£o ap√≥s corre√ß√µes!")
        print("üéâ Cursor AI pode finalizar o c√≥digo.")
        return True

    print("‚ùå C√≥digo ainda n√£o passou na valida√ß√£o!")
    print("üìã Problemas restantes:")
    print(stdout)

    # 4. Analisar problemas restantes
    print("\n4Ô∏è‚É£ AN√ÅLISE DE PROBLEMAS RESTANTES")
    remaining_issues = analyze_remaining_issues(stdout)

    if remaining_issues:
        print("‚ö†Ô∏è Problemas que precisam de corre√ß√£o manual:")
        for issue in remaining_issues:
            print(f"  {issue}")

    print("\nüîß PR√ìXIMOS PASSOS PARA CURSOR AI:")
    print("  1. Refatorar arquivos grandes em m√≥dulos menores")
    print("  2. Corrigir problemas de estrutura manualmente")
    print("  3. Executar valida√ß√£o novamente")
    print("  4. Repetir at√© passar na valida√ß√£o")

    print("\n‚ùå CURSOR AI N√ÉO DEVE FINALIZAR O C√ìDIGO AINDA!")
    print("‚úÖ Cursor AI deve continuar corrigindo at√© passar na valida√ß√£o.")

    return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
