#!/usr/bin/env python3
"""
Script para demonstrar o fluxo de valida√ß√£o do Cursor AI
Mostra o que acontece quando o c√≥digo n√£o passa na valida√ß√£o
"""

import subprocess
import sys
from pathlib import Path


def run_validation():
    """Executa valida√ß√£o e retorna resultado detalhado"""
    print("üîç Executando valida√ß√£o...")

    try:
        result = subprocess.run(
            ["python", "scripts/validate_code_quality.py"],
            capture_output=True,
            text=True,
            cwd=Path.cwd(),
        )

        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def auto_fix_issues():
    """Tenta corrigir problemas automaticamente"""
    print("üîß Tentando corrigir problemas automaticamente...")

    fixes_applied = []

    # 1. Formatar Python com Black
    try:
        result = subprocess.run(
            ["python", "-m", "black", "app/", "scripts/", "--line-length", "100"],
            capture_output=True,
            text=True,
        )
        if result.returncode == 0:
            fixes_applied.append("‚úÖ Python formatado com Black")
        else:
            fixes_applied.append("‚ùå Erro ao formatar Python com Black")
    except Exception as e:
        fixes_applied.append(f"‚ùå Erro ao executar Black: {e}")

    # 2. Organizar imports Python
    try:
        result = subprocess.run(
            ["python", "-m", "isort", "app/", "scripts/", "--profile", "black"],
            capture_output=True,
            text=True,
        )
        if result.returncode == 0:
            fixes_applied.append("‚úÖ Imports Python organizados com isort")
        else:
            fixes_applied.append("‚ùå Erro ao organizar imports Python")
    except Exception as e:
        fixes_applied.append(f"‚ùå Erro ao executar isort: {e}")

    # 3. Formatar JavaScript
    try:
        result = subprocess.run(
            ["npm", "run", "format"], capture_output=True, text=True, cwd=Path("frontend")
        )
        if result.returncode == 0:
            fixes_applied.append("‚úÖ JavaScript formatado com Prettier")
        else:
            fixes_applied.append("‚ùå Erro ao formatar JavaScript")
    except Exception as e:
        fixes_applied.append(f"‚ùå Erro ao executar Prettier: {e}")

    # 4. Corrigir linting JavaScript
    try:
        result = subprocess.run(
            ["npm", "run", "lint:fix"], capture_output=True, text=True, cwd=Path("frontend")
        )
        if result.returncode == 0:
            fixes_applied.append("‚úÖ Linting JavaScript corrigido")
        else:
            fixes_applied.append("‚ùå Erro ao corrigir linting JavaScript")
    except Exception as e:
        fixes_applied.append(f"‚ùå Erro ao executar ESLint: {e}")

    return fixes_applied


def show_validation_flow():
    """Demonstra o fluxo completo de valida√ß√£o"""
    print("ü§ñ FLUXO DE VALIDA√á√ÉO DO CURSOR AI")
    print("=" * 50)

    # 1. Executar valida√ß√£o inicial
    print("\n1Ô∏è‚É£ VALIDA√á√ÉO INICIAL")
    success, stdout, stderr = run_validation()

    if success:
        print("‚úÖ C√≥digo passou na valida√ß√£o!")
        print("üéâ Cursor AI pode finalizar o c√≥digo.")
        return True

    print("‚ùå C√≥digo N√ÉO passou na valida√ß√£o!")
    print("\nüìã PROBLEMAS ENCONTRADOS:")
    print(stdout)

    # 2. Tentar corre√ß√£o autom√°tica
    print("\n2Ô∏è‚É£ TENTATIVA DE CORRE√á√ÉO AUTOM√ÅTICA")
    fixes = auto_fix_issues()

    for fix in fixes:
        print(f"  {fix}")

    # 3. Validar novamente
    print("\n3Ô∏è‚É£ VALIDA√á√ÉO AP√ìS CORRE√á√ïES")
    success, stdout, stderr = run_validation()

    if success:
        print("‚úÖ C√≥digo passou na valida√ß√£o ap√≥s corre√ß√µes!")
        print("üéâ Cursor AI pode finalizar o c√≥digo.")
        return True

    print("‚ùå C√≥digo AINDA n√£o passou na valida√ß√£o!")
    print("\nüìã PROBLEMAS RESTANTES:")
    print(stdout)

    # 4. Mostrar pr√≥ximos passos
    print("\n4Ô∏è‚É£ PR√ìXIMOS PASSOS PARA CURSOR AI")
    print("üîß O Cursor AI deve:")
    print("  1. Analisar os problemas restantes")
    print("  2. Refatorar c√≥digo manualmente")
    print("  3. Quebrar arquivos grandes em m√≥dulos menores")
    print("  4. Executar valida√ß√£o novamente")
    print("  5. Repetir at√© passar na valida√ß√£o")

    return False


def show_cursor_ai_behavior():
    """Mostra como o Cursor AI deve se comportar"""
    print("\nü§ñ COMPORTAMENTO DO CURSOR AI")
    print("=" * 50)

    print("\nüìã QUANDO O C√ìDIGO N√ÉO PASSA NA VALIDA√á√ÉO:")
    print("  1. ‚ùå Cursor AI N√ÉO deve finalizar o c√≥digo")
    print("  2. üîß Cursor AI deve tentar corre√ß√£o autom√°tica")
    print("  3. üîÑ Cursor AI deve executar valida√ß√£o novamente")
    print("  4. üìù Cursor AI deve refatorar se necess√°rio")
    print("  5. ‚úÖ Cursor AI s√≥ finaliza quando passar na valida√ß√£o")

    print("\nüö´ O QUE CURSOR AI N√ÉO DEVE FAZER:")
    print("  ‚Ä¢ Finalizar c√≥digo com problemas de valida√ß√£o")
    print("  ‚Ä¢ Ignorar regras de formata√ß√£o")
    print("  ‚Ä¢ Deixar arquivos muito grandes")
    print("  ‚Ä¢ Pular a valida√ß√£o")

    print("\n‚úÖ O QUE CURSOR AI DEVE FAZER:")
    print("  ‚Ä¢ Sempre executar valida√ß√£o antes de finalizar")
    print("  ‚Ä¢ Corrigir problemas automaticamente quando poss√≠vel")
    print("  ‚Ä¢ Refatorar c√≥digo quando necess√°rio")
    print("  ‚Ä¢ Manter consist√™ncia com o projeto")
    print("  ‚Ä¢ Seguir as regras do .cursorrules")


def main():
    """Fun√ß√£o principal"""
    print("üîç SIMULANDO FLUXO DE VALIDA√á√ÉO DO CURSOR AI")
    print("=" * 60)

    # Mostrar comportamento esperado
    show_cursor_ai_behavior()

    print("\n" + "=" * 60)

    # Simular fluxo de valida√ß√£o
    success = show_validation_flow()

    print("\n" + "=" * 60)

    if success:
        print("üéâ RESULTADO: C√≥digo v√°lido! Cursor AI pode finalizar.")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è RESULTADO: C√≥digo inv√°lido! Cursor AI deve corrigir.")
        sys.exit(1)


if __name__ == "__main__":
    main()
