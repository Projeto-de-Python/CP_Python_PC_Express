# Cursor AI Rules - PC Express Project

## üéØ **OBRIGAT√ìRIO: Siga estas regras em TODOS os c√≥digos**

### **Python - Formata√ß√£o e Linting**

- **SEMPRE** use Black com line-length=100
- **SEMPRE** organize imports com isort (profile=black)
- **SEMPRE** use type hints em fun√ß√µes p√∫blicas
- **SEMPRE** siga PEP 8 com exce√ß√µes do Black
- **NUNCA** deixe linhas com mais de 100 caracteres
- **SEMPRE** use docstrings para fun√ß√µes complexas

### **JavaScript/React - Formata√ß√£o e Linting**

- **SEMPRE** use Prettier com configura√ß√£o do projeto
- **SEMPRE** use ESLint com regras do projeto
- **SEMPRE** quebre componentes grandes em componentes menores
- **SEMPRE** use PropTypes para valida√ß√£o
- **NUNCA** deixe arquivos com mais de 200 linhas
- **SEMPRE** use styled-components para estilos

### **Estrutura de Componentes React**

- **SEMPRE** separe styled-components em arquivo separado (.js)
- **SEMPRE** crie componentes pequenos e focados
- **SEMPRE** use hooks apropriados (useState, useEffect, etc.)
- **SEMPRE** implemente PropTypes corretamente
- **NUNCA** misture l√≥gica de neg√≥cio com apresenta√ß√£o

### **Regras para Hooks**

- **SEMPRE** mantenha hooks simples e focados quando poss√≠vel
- **PREFIRA** hooks menores, mas aceite hooks grandes se justificados
- **NUNCA** use mais de 12 hooks no mesmo componente
- **SEMPRE** quebre hooks complexos em fun√ß√µes menores quando vi√°vel
- **SEMPRE** extraia l√≥gica complexa para hooks customizados quando apropriado
- **EVITE** useEffect com muitas depend√™ncias (>8), mas aceite se necess√°rio
- **PREFIRA** separar m√∫ltiplas opera√ß√µes em useEffect diferentes
- **CONSIDERE** a complexidade real, n√£o apenas o tamanho

### **Arquitetura do Projeto**

- **SEMPRE** mantenha a estrutura modular:
  - `app/` - Backend Python (FastAPI)
  - `frontend/src/` - Frontend React
  - `scripts/` - Scripts Python
- **SEMPRE** use imports relativos corretos
- **SEMPRE** mantenha separa√ß√£o de responsabilidades

### **Comandos de Formata√ß√£o**

- **Python**: `python -m black . --line-length 100 && python -m isort . --profile black`
- **JavaScript**: `npm run format && npm run lint:fix`

### **Valida√ß√£o Autom√°tica**

- **SEMPRE** execute valida√ß√£o antes de finalizar c√≥digo
- **SEMPRE** use os atalhos criados: `validate.bat` ou `./validate.sh`
- **SEMPRE** use npm scripts: `npm run validate` ou `npm run fix:all`
- **SEMPRE** verifique se Git hooks est√£o ativos (valida√ß√£o autom√°tica em commits)

### **Comportamento Quando Valida√ß√£o Falha**

- **NUNCA** finalize c√≥digo que n√£o passa na valida√ß√£o
- **SEMPRE** tente corre√ß√£o autom√°tica primeiro: `npm run fix:all`
- **SEMPRE** refatore c√≥digo se necess√°rio (arquivos grandes, problemas de estrutura)
- **SEMPRE** execute valida√ß√£o novamente ap√≥s corre√ß√µes
- **SEMPRE** repita o processo at√© o c√≥digo passar na valida√ß√£o
- **SEMPRE** informe o usu√°rio sobre problemas que n√£o podem ser corrigidos automaticamente

### **Exemplos de Boas Pr√°ticas**

#### **Python - Fun√ß√£o Bem Formatada:**

```python
from typing import List, Optional
from sqlalchemy.orm import Session
from fastapi import HTTPException

def create_product(
    db: Session,
    data: schemas.ProductCreate,
    user_id: int
) -> models.Product:
    """Create a new product with validation."""
    product = models.Product(**data.model_dump(), user_id=user_id)
    db.add(product)
    try:
        db.commit()
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=409, detail="Product code already exists")
    db.refresh(product)
    return product
```

#### **React - Componente Bem Estruturado:**

```jsx
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { Button, TextField } from '@mui/material';
import { StyledContainer, StyledForm } from './ComponentStyles';

const MyComponent = ({ onSubmit, loading }) => {
  const [value, setValue] = useState('');

  const handleSubmit = e => {
    e.preventDefault();
    onSubmit(value);
  };

  return (
    <StyledContainer>
      <StyledForm onSubmit={handleSubmit}>
        <TextField value={value} onChange={e => setValue(e.target.value)} label="Input" />
        <Button type="submit" disabled={loading}>
          Submit
        </Button>
      </StyledForm>
    </StyledContainer>
  );
};

MyComponent.propTypes = {
  onSubmit: PropTypes.func.isRequired,
  loading: PropTypes.bool.isRequired,
};

export default MyComponent;
```

### **Regras de Commit**

- **SEMPRE** execute formata√ß√£o antes de commitar
- **SEMPRE** teste se o c√≥digo est√° funcionando
- **SEMPRE** mantenha commits pequenos e focados

### **Arquivos de Configura√ß√£o**

- `pyproject.toml` - Configura√ß√£o Black/isort
- `.prettierrc` - Configura√ß√£o Prettier
- `eslint.config.js` - Configura√ß√£o ESLint
- `.editorconfig` - Configura√ß√£o Editor

### **‚ö†Ô∏è IMPORTANTE**

- **NUNCA** ignore essas regras
- **SEMPRE** formate o c√≥digo antes de finalizar
- **SEMPRE** mantenha consist√™ncia com o projeto existente
- **SEMPRE** teste se as regras est√£o sendo seguidas

## üöÄ **Comandos R√°pidos**

```bash
# Python
python -m black . --line-length 100
python -m isort . --profile black

# JavaScript
npm run format
npm run lint:fix
npm run lint:all
```
