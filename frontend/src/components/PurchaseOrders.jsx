import {
  Alert,
  Box,
  Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Divider,
  FormControl,
  Grid,
  IconButton,
  InputLabel,
  MenuItem,
  Paper,
  Select,
  Slider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip,
  Typography
} from '@mui/material';
import {
  AlertTriangle,
  CheckCircle,
  Clock,
  DollarSign,
  Eye,
  FileText,
  HelpCircle,
  Play,
  Plus,
  RefreshCw,
  ShoppingCart,
  Square,
  Trash2,
  TrendingUp,
  Zap
} from 'lucide-react';
import PropTypes from 'prop-types';
import React, { useEffect, useState } from 'react';

import { insightsAPI, purchaseOrdersAPI, simulationAPI, suppliersAPI } from '../services/api.jsx';

export default function PurchaseOrders({ darkMode }) {
  const [purchaseOrders, setPurchaseOrders] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedPO, setSelectedPO] = useState(null);
  const [viewDialog, setViewDialog] = useState(false);
  const [autoGenerateDialog, setAutoGenerateDialog] = useState(false);
  const [selectedSupplier, setSelectedSupplier] = useState('');
  const [rejectDialog, setRejectDialog] = useState(false);
  const [rejectReason, setRejectReason] = useState('');

  // Simulation states
  const [simulationDialog, setSimulationDialog] = useState(false);
  const [simulationStatus, setSimulationStatus] = useState(null);
  const [simulationDuration, setSimulationDuration] = useState(10);
  const [maxPendingOrders, setMaxPendingOrders] = useState(5);
  const [statistics, setStatistics] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async() => {
    try {
      setLoading(true);
      const [poResponse, suppliersResponse, statsResponse] = await Promise.all([
        purchaseOrdersAPI.getAll(),
        suppliersAPI.getAll(),
        purchaseOrdersAPI.getStatistics ? purchaseOrdersAPI.getStatistics() : Promise.resolve({ data: null })
      ]);
      setPurchaseOrders(poResponse.data);
      setSuppliers(suppliersResponse.data);
      setStatistics(statsResponse.data);
      setError(null);
    } catch {
      setError('Failed to load purchase orders data');
    } finally {
      setLoading(false);
    }
  };

  const fetchSimulationStatus = async() => {
    try {
      const response = await simulationAPI.getStatus();
      setSimulationStatus(response.data);
    } catch (err) {
      // Failed to fetch simulation status
    }
  };

  const handleViewPO = po => {
    setSelectedPO(po);
    setViewDialog(true);
  };

  const handleApprovePO = async poId => {
    try {
      await purchaseOrdersAPI.approve(poId);
      fetchData();
    } catch {
      setError('Failed to approve purchase order');
    }
  };

  const handleRejectPO = async(poId, reason) => {
    try {
      await purchaseOrdersAPI.reject(poId, reason);
      setRejectDialog(false);
      setRejectReason('');
      fetchData();
    } catch {
      setError('Failed to reject purchase order');
    }
  };

  const openRejectDialog = (po) => {
    setSelectedPO(po);
    setRejectDialog(true);
  };

  const handleDeletePO = async poId => {
    try {
      await purchaseOrdersAPI.delete(poId);
      fetchData();
    } catch {
      setError('Failed to delete purchase order');
    }
  };

  const handleAutoGenerate = async() => {
    if (!selectedSupplier) {
return;
}

    try {
      await purchaseOrdersAPI.autoGenerate(selectedSupplier);
      setAutoGenerateDialog(false);
      setSelectedSupplier('');
      fetchData();
    } catch {
      setError('Failed to auto-generate purchase order');
    }
  };

  const handleCreateFakeSales = async() => {
    try {
      // Create fake sales by calling the insights API
      const response = await insightsAPI.generateSalesData(7);
      if (response.data) {
        // Created fake sales successfully
        // Refresh data to show updated stock levels
        fetchData();
      } else {
        setError('Failed to create fake sales');
      }
    } catch {
      setError('Failed to create fake sales');
    }
  };

  const handleStartSimulation = async() => {
    try {
      await simulationAPI.start(simulationDuration, maxPendingOrders);
      setSimulationDialog(false);
      // Simulation started successfully
      fetchData();
      fetchSimulationStatus();
    } catch {
      setError('Failed to start simulation');
    }
  };

  const handleStopSimulation = async() => {
    try {
      await simulationAPI.stop();
      // Simulation stopped successfully
      fetchSimulationStatus();
    } catch {
      setError('Failed to stop simulation');
    }
  };

  const handleApproveAll = async() => {
    try {
      const response = await simulationAPI.approveAll();
      // Purchase orders approved successfully
      fetchData();
    } catch {
      setError('Failed to approve all orders');
    }
  };

  const handleClearApproved = async() => {
    try {
      const response = await simulationAPI.clearApproved();
      // Approved purchase orders cleared successfully
      fetchData();
    } catch {
      setError('Failed to clear approved orders');
    }
  };

  const getStatusIcon = status => {
    switch (status) {
      case 'DRAFT':
        return <FileText size={20} color="#757575" />;
      case 'PENDING_APPROVAL':
        return <Clock size={20} color="#ff9800" />;
      case 'APPROVED':
        return <CheckCircle size={20} color="#4caf50" />;
      case 'CANCELLED':
        return <AlertTriangle size={20} color="#f44336" />;
      default:
        return <FileText size={20} />;
    }
  };

  const getStatusColor = status => {
    switch (status) {
      case 'DRAFT':
        return 'default';
      case 'PENDING_APPROVAL':
        return 'warning';
      case 'APPROVED':
        return 'success';
      case 'CANCELLED':
        return 'error';
      default:
        return 'default';
    }
  };

  const getStatusLabel = status => {
    switch (status) {
      case 'DRAFT':
        return 'Draft';
      case 'PENDING_APPROVAL':
        return 'Pending Approval';
      case 'APPROVED':
        return 'Approved';
      case 'CANCELLED':
        return 'Cancelled';
      default:
        return status;
    }
  };

  const getTotalItems = po => {
    return po.items.reduce((sum, item) => sum + item.quantidade_solicitada, 0);
  };

  const getReceivedItems = po => {
    return po.items.reduce((sum, item) => sum + (item.quantidade_recebida || 0), 0);
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress size={60} />
      </Box>
    );
  }

  return (
    <Box>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Box display="flex" alignItems="center" gap={2}>
          <Typography
            variant="h4"
            fontWeight="bold"
            sx={{
              background: 'linear-gradient(45deg, #4caf50, #2e7d32)',
              backgroundClip: 'text',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent'
            }}
          >
            Purchase Orders
          </Typography>
          <Tooltip title="Manage purchase orders for inventory replenishment. Create new orders, approve pending ones, and track order status. Use auto-generate to create orders based on low stock items.">
            <IconButton
              size="small"
              sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
            >
              <HelpCircle size={18} />
            </IconButton>
          </Tooltip>
        </Box>
        <Box display="flex" gap={2}>
          <Tooltip title="Create Fake Sales for Testing">
            <Button
              variant="outlined"
              startIcon={<TrendingUp />}
              onClick={handleCreateFakeSales}
              sx={{
                borderColor: '#ff9800',
                color: '#ff9800',
                '&:hover': {
                  borderColor: '#f57c00',
                  backgroundColor: 'rgba(255, 152, 0, 0.1)'
                }
              }}
            >
              Create Fake Sales
            </Button>
          </Tooltip>
          <Tooltip title="Auto-Generate PO">
            <Button
              variant="outlined"
              startIcon={<Zap />}
              onClick={() => setAutoGenerateDialog(true)}
              sx={{
                borderColor: '#4caf50',
                color: '#4caf50',
                '&:hover': {
                  borderColor: '#2e7d32',
                  backgroundColor: 'rgba(76, 175, 80, 0.1)'
                }
              }}
            >
              Auto-Generate
            </Button>
          </Tooltip>
          <Tooltip title="Create New PO">
            <Button
              variant="contained"
              startIcon={<Plus />}
              onClick={() => setError('Create PO functionality coming soon!')}
              sx={{
                background: 'linear-gradient(45deg, #4caf50, #2e7d32)',
                '&:hover': { background: 'linear-gradient(45deg, #2e7d32, #1b5e20)' }
              }}
            >
              New PO
            </Button>
          </Tooltip>
          <Tooltip title="Start Sales Simulation">
            <Button
              variant="outlined"
              startIcon={<Play />}
              onClick={() => setSimulationDialog(true)}
              sx={{
                borderColor: '#2196f3',
                color: '#2196f3',
                '&:hover': {
                  borderColor: '#1976d2',
                  backgroundColor: 'rgba(33, 150, 243, 0.1)'
                }
              }}
            >
              Start Simulation
            </Button>
          </Tooltip>
          {simulationStatus?.is_running && (
            <Tooltip title="Stop Simulation">
              <Button
                variant="outlined"
                startIcon={<Square />}
                onClick={handleStopSimulation}
                sx={{
                  borderColor: '#f44336',
                  color: '#f44336',
                  '&:hover': {
                    borderColor: '#d32f2f',
                    backgroundColor: 'rgba(244, 67, 54, 0.1)'
                  }
                }}
              >
                Stop Simulation
              </Button>
            </Tooltip>
          )}
          <Tooltip title="Refresh Data">
            <IconButton
              onClick={fetchData}
              sx={{
                background: 'linear-gradient(45deg, #4caf50, #2e7d32)',
                color: 'white',
                '&:hover': { background: 'linear-gradient(45deg, #2e7d32, #1b5e20)' }
              }}
            >
              <RefreshCw size={20} />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Summary Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid size={{ xs: 12, sm: 6, md: 3 }}>
          <Card
            sx={{
              background: darkMode
                ? 'linear-gradient(135deg, rgba(76, 175, 80, 0.1) 0%, rgba(76, 175, 80, 0.05) 100%)'
                : 'linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%)',
              height: '100%',
              border: darkMode ? '1px solid rgba(76, 175, 80, 0.2)' : 'none',
              '&:hover': {
                boxShadow: darkMode
                  ? '0 4px 20px rgba(76, 175, 80, 0.15), 0 0 0 1px rgba(76, 175, 80, 0.1)'
                  : '0 4px 20px rgba(76, 175, 80, 0.1), 0 0 0 1px rgba(76, 175, 80, 0.05)'
              }
            }}
          >
            <CardContent>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Box>
                  <Typography
                    sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                    gutterBottom
                    variant="h6"
                  >
                    Total POs
                  </Typography>
                  <Typography variant="h3" component="div" color="success.main" fontWeight="bold">
                    {purchaseOrders.length}
                  </Typography>
                </Box>
                <ShoppingCart size={40} color="#4caf50" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }}>
          <Card
            sx={{
              background: darkMode
                ? 'linear-gradient(135deg, rgba(255, 152, 0, 0.1) 0%, rgba(255, 152, 0, 0.05) 100%)'
                : 'linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%)',
              height: '100%',
              border: darkMode ? '1px solid rgba(255, 152, 0, 0.2)' : 'none',
              '&:hover': {
                boxShadow: darkMode
                  ? '0 4px 20px rgba(255, 152, 0, 0.15), 0 0 0 1px rgba(255, 152, 0, 0.1)'
                  : '0 4px 20px rgba(255, 152, 0, 0.1), 0 0 0 1px rgba(255, 152, 0, 0.05)'
              }
            }}
          >
            <CardContent>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Box>
                  <Typography
                    sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                    gutterBottom
                    variant="h6"
                  >
                    Pending Approval
                  </Typography>
                  <Typography variant="h3" component="div" color="warning.main" fontWeight="bold">
                    {purchaseOrders.filter(po => po.status === 'PENDING_APPROVAL').length}
                  </Typography>
                </Box>
                <Clock size={40} color="#ff9800" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }}>
          <Card
            sx={{
              background: darkMode
                ? 'linear-gradient(135deg, rgba(33, 150, 243, 0.1) 0%, rgba(33, 150, 243, 0.05) 100%)'
                : 'linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%)',
              height: '100%',
              border: darkMode ? '1px solid rgba(33, 150, 243, 0.2)' : 'none',
              '&:hover': {
                boxShadow: darkMode
                  ? '0 4px 20px rgba(33, 150, 243, 0.15), 0 0 0 1px rgba(33, 150, 243, 0.1)'
                  : '0 4px 20px rgba(33, 150, 243, 0.1), 0 0 0 1px rgba(33, 150, 243, 0.05)'
              }
            }}
          >
            <CardContent>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Box>
                  <Typography
                    sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                    gutterBottom
                    variant="h6"
                  >
                    Approved POs
                  </Typography>
                  <Typography variant="h3" component="div" color="info.main" fontWeight="bold">
                    {purchaseOrders.filter(po => po.status === 'APPROVED').length}
                  </Typography>
                </Box>
                <CheckCircle size={40} color="#2196f3" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 3 }}>
          <Card
            sx={{
              background: darkMode
                ? 'linear-gradient(135deg, rgba(156, 39, 176, 0.1) 0%, rgba(156, 39, 176, 0.05) 100%)'
                : 'linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%)',
              height: '100%',
              border: darkMode ? '1px solid rgba(156, 39, 176, 0.2)' : 'none',
              '&:hover': {
                boxShadow: darkMode
                  ? '0 4px 20px rgba(156, 39, 176, 0.15), 0 0 0 1px rgba(156, 39, 176, 0.1)'
                  : '0 4px 20px rgba(156, 39, 176, 0.1), 0 0 0 1px rgba(156, 39, 176, 0.05)'
              }
            }}
          >
            <CardContent>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Box>
                  <Typography
                    sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                    gutterBottom
                    variant="h6"
                  >
                    Approved Value
                  </Typography>
                  <Typography variant="h3" component="div" color="secondary.main" fontWeight="bold">
                    $
                    {(statistics?.approved_value || 0).toLocaleString('en-US', {
                      minimumFractionDigits: 0,
                      maximumFractionDigits: 0
                    })}
                  </Typography>
                </Box>
                <DollarSign size={40} color="#9c27b0" />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Purchase Orders Table */}
      <Card
        sx={{
          borderRadius: 2,
          overflow: 'hidden',
          background: darkMode
            ? 'linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%)'
            : 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
          backdropFilter: 'blur(10px)',
          border: darkMode ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)'
        }}
      >
        <CardContent>
          <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
            <Typography
              variant="h6"
              fontWeight="600"
              sx={{ color: darkMode ? '#ffffff' : '#000000' }}
            >
              Purchase Orders List
            </Typography>
            <Box display="flex" alignItems="center" gap={1}>
              <Tooltip title="Approve All Pending Orders">
                <span>
                  <Button
                    size="small"
                    variant="outlined"
                    startIcon={<CheckCircle size={16} />}
                    onClick={handleApproveAll}
                    disabled={!purchaseOrders.some(po => po.status === 'PENDING_APPROVAL')}
                    sx={{
                      borderColor: '#4caf50',
                      color: '#4caf50',
                      '&:hover': {
                        borderColor: '#2e7d32',
                        backgroundColor: 'rgba(76, 175, 80, 0.1)'
                      }
                    }}
                  >
                    Approve All
                  </Button>
                </span>
              </Tooltip>
              <Tooltip title="Clear Approved Orders">
                <span>
                  <Button
                    size="small"
                    variant="outlined"
                    startIcon={<Trash2 size={16} />}
                    onClick={handleClearApproved}
                    disabled={!purchaseOrders.some(po => po.status === 'APPROVED')}
                    sx={{
                      borderColor: '#f44336',
                      color: '#f44336',
                      '&:hover': {
                        borderColor: '#d32f2f',
                        backgroundColor: 'rgba(244, 67, 54, 0.1)'
                      }
                    }}
                  >
                    Clear Approved
                  </Button>
                </span>
              </Tooltip>
              <Tooltip title="View all purchase orders and their current status. Click the eye icon to see details, edit icon to modify, or approve/reject pending orders.">
                <IconButton
                  size="small"
                  sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                >
                  <HelpCircle size={18} />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>

          <TableContainer
            component={Paper}
            sx={{
              borderRadius: 2,
              background: darkMode ? 'rgba(255,255,255,0.02)' : 'rgba(255,255,255,0.8)',
              backdropFilter: 'blur(10px)'
            }}
          >
            <Table>
              <TableHead>
                <TableRow sx={{ background: 'linear-gradient(45deg, #4caf50, #2e7d32)' }}>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>PO #</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Supplier</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Status</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Items</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Total Value</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Created</TableCell>
                  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {purchaseOrders.map(po => (
                  <TableRow
                    key={po.id}
                    sx={{
                      backgroundColor: darkMode
                        ? 'rgba(255,255,255,0.02)'
                        : 'rgba(255,255,255,0.5)',
                      '&:hover': {
                        background: darkMode
                          ? 'linear-gradient(135deg, rgba(255,255,255,0.08) 0%, rgba(255,255,255,0.05) 100%)'
                          : 'linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%)'
                      }
                    }}
                  >
                    <TableCell>
                      <Typography
                        variant="subtitle1"
                        fontWeight="600"
                        sx={{ color: darkMode ? '#ffffff' : '#000000' }}
                      >
                        #{po.id}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography
                        variant="subtitle2"
                        fontWeight="600"
                        sx={{ color: darkMode ? '#ffffff' : '#000000' }}
                      >
                        {po.fornecedor_nome}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Chip
                        icon={getStatusIcon(po.status)}
                        label={getStatusLabel(po.status)}
                        color={getStatusColor(po.status)}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Box>
                        <Typography
                          variant="body2"
                          fontWeight="600"
                          sx={{ color: darkMode ? '#ffffff' : '#000000' }}
                        >
                          {getTotalItems(po)} items
                        </Typography>
                        {po.status === 'APPROVED' && (
                          <Typography
                            variant="caption"
                            sx={{ color: darkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}
                          >
                            {getReceivedItems(po)} received
                          </Typography>
                        )}
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" fontWeight="600" color="success.main">
                        ${po.total_value.toFixed(2)}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" sx={{ color: darkMode ? '#ffffff' : '#000000' }}>
                        {new Date(po.criado_em).toLocaleDateString()}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Box display="flex" gap={0.5}>
                        <Tooltip title="View Details">
                          <IconButton
                            size="small"
                            onClick={() => handleViewPO(po)}
                            sx={{ color: 'primary.main' }}
                          >
                            <Eye size={18} />
                          </IconButton>
                        </Tooltip>
                        {po.status === 'PENDING_APPROVAL' && (
                          <>
                            <Tooltip title="Approve">
                              <IconButton
                                size="small"
                                onClick={() => handleApprovePO(po.id)}
                                sx={{ color: 'success.main' }}
                              >
                                <CheckCircle size={18} />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="Reject">
                              <IconButton
                                size="small"
                                onClick={() => openRejectDialog(po)}
                                sx={{ color: 'error.main' }}
                              >
                                <AlertTriangle size={18} />
                              </IconButton>
                            </Tooltip>
                          </>
                        )}
                        {po.status === 'DRAFT' && (
                          <Tooltip title="Delete">
                            <IconButton
                              size="small"
                              onClick={() => handleDeletePO(po.id)}
                              sx={{ color: 'error.main' }}
                            >
                              <Trash2 size={18} />
                            </IconButton>
                          </Tooltip>
                        )}
                      </Box>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>

      {/* View PO Dialog */}
      <Dialog open={viewDialog} onClose={() => setViewDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle
          sx={{ background: 'linear-gradient(45deg, #4caf50, #2e7d32)', color: 'white' }}
        >
          Purchase Order #{selectedPO?.id} - {selectedPO?.fornecedor_nome}
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          {selectedPO && (
            <Box>
              <Grid container spacing={2} sx={{ mb: 3 }}>
                <Grid size={{ xs: 6 }}>
                  <Typography variant="body2" color="textSecondary">
                    Status
                  </Typography>
                  <Chip
                    icon={getStatusIcon(selectedPO.status)}
                    label={getStatusLabel(selectedPO.status)}
                    color={getStatusColor(selectedPO.status)}
                    size="small"
                  />
                </Grid>
                <Grid size={{ xs: 6 }}>
                  <Typography variant="body2" color="textSecondary">
                    Total Value
                  </Typography>
                  <Typography variant="h6" fontWeight="600" color="success.main">
                    ${selectedPO.total_value.toFixed(2)}
                  </Typography>
                </Grid>
                <Grid size={{ xs: 6 }}>
                  <Typography variant="body2" color="textSecondary">
                    Created
                  </Typography>
                  <Typography variant="body2">
                    {new Date(selectedPO.criado_em).toLocaleDateString()}
                  </Typography>
                </Grid>
                {selectedPO.aprovado_em && (
                  <Grid size={{ xs: 6 }}>
                    <Typography variant="body2" color="textSecondary">
                      Approved
                    </Typography>
                    <Typography variant="body2">
                      {new Date(selectedPO.aprovado_em).toLocaleDateString()}
                    </Typography>
                  </Grid>
                )}
              </Grid>

              <Divider sx={{ my: 2 }} />

              <Typography variant="h6" gutterBottom>
                Items
              </Typography>
              <TableContainer component={Paper} sx={{ borderRadius: 2 }}>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Product</TableCell>
                      <TableCell>Code</TableCell>
                      <TableCell align="right">Qty Requested</TableCell>
                      <TableCell align="right">Qty Received</TableCell>
                      <TableCell align="right">Unit Price</TableCell>
                      <TableCell align="right">Total</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {selectedPO.items.map(item => (
                      <TableRow key={item.id}>
                        <TableCell>{item.produto_nome}</TableCell>
                        <TableCell>{item.produto_codigo}</TableCell>
                        <TableCell align="right">{item.quantidade_solicitada}</TableCell>
                        <TableCell align="right">{item.quantidade_recebida}</TableCell>
                        <TableCell align="right">${item.preco_unitario.toFixed(2)}</TableCell>
                        <TableCell align="right">
                          ${(item.quantidade_solicitada * item.preco_unitario).toFixed(2)}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              {selectedPO.observacoes && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="textSecondary">
                    Notes
                  </Typography>
                  <Typography variant="body2">{selectedPO.observacoes}</Typography>
                </Box>
              )}
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setViewDialog(false)}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Auto-Generate Dialog */}
      <Dialog
        open={autoGenerateDialog}
        onClose={() => setAutoGenerateDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle
          sx={{ background: 'linear-gradient(45deg, #4caf50, #2e7d32)', color: 'white' }}
        >
          Auto-Generate Purchase Order
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          <Typography variant="body2" color="textSecondary" gutterBottom>
            Select a supplier to automatically generate a purchase order for products that need
            reordering.
          </Typography>

          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel>Supplier</InputLabel>
            <Select value={selectedSupplier} onChange={e => setSelectedSupplier(e.target.value)}>
              {suppliers.map(supplier => (
                <MenuItem key={supplier.id} value={supplier.id}>
                  {supplier.nome}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAutoGenerateDialog(false)}>Cancel</Button>
          <Button
            onClick={handleAutoGenerate}
            variant="contained"
            disabled={!selectedSupplier}
            sx={{
              background: 'linear-gradient(45deg, #4caf50, #2e7d32)',
              '&:hover': { background: 'linear-gradient(45deg, #2e7d32, #1b5e20)' }
            }}
          >
            Generate PO
          </Button>
        </DialogActions>
      </Dialog>

      {/* Reject Purchase Order Dialog */}
      <Dialog open={rejectDialog} onClose={() => setRejectDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle
          sx={{ background: 'linear-gradient(45deg, #f44336, #d32f2f)', color: 'white' }}
        >
          Reject Purchase Order #{selectedPO?.id}
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          <Typography variant="body1" sx={{ mb: 2 }}>
            Are you sure you want to reject this purchase order? This action cannot be undone.
          </Typography>
          <FormControl fullWidth>
            <InputLabel>Reason for rejection (optional)</InputLabel>
            <Select
              value={rejectReason}
              onChange={(e) => setRejectReason(e.target.value)}
              label="Reason for rejection (optional)"
            >
              <MenuItem value="">No specific reason</MenuItem>
              <MenuItem value="Budget constraints">Budget constraints</MenuItem>
              <MenuItem value="Product not needed">Product not needed</MenuItem>
              <MenuItem value="Supplier issues">Supplier issues</MenuItem>
              <MenuItem value="Quality concerns">Quality concerns</MenuItem>
              <MenuItem value="Timing issues">Timing issues</MenuItem>
              <MenuItem value="Other">Other</MenuItem>
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setRejectDialog(false)}>Cancel</Button>
          <Button
            onClick={() => handleRejectPO(selectedPO?.id, rejectReason)}
            variant="contained"
            sx={{
              background: 'linear-gradient(45deg, #f44336, #d32f2f)',
              '&:hover': { background: 'linear-gradient(45deg, #d32f2f, #b71c1c)' }
            }}
          >
            Reject Order
          </Button>
        </DialogActions>
      </Dialog>

      {/* Simulation Dialog */}
      <Dialog
        open={simulationDialog}
        onClose={() => setSimulationDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle
          sx={{ background: 'linear-gradient(45deg, #2196f3, #1976d2)', color: 'white' }}
        >
          Start Sales Simulation
        </DialogTitle>
        <DialogContent sx={{ mt: 2 }}>
          <Typography variant="body2" color="textSecondary" gutterBottom>
            Configure the sales simulation to automatically create purchase orders based on your inventory.
          </Typography>

          <Box sx={{ mt: 3 }}>
            <Typography gutterBottom>
              Duration: {simulationDuration} minutes
            </Typography>
            <Slider
              value={simulationDuration}
              onChange={(e, value) => setSimulationDuration(value)}
              min={5}
              max={60}
              step={5}
              marks={[
                { value: 5, label: '5m' },
                { value: 15, label: '15m' },
                { value: 30, label: '30m' },
                { value: 60, label: '60m' }
              ]}
              valueLabelDisplay="auto"
            />
          </Box>

          <Box sx={{ mt: 3 }}>
            <Typography gutterBottom>
              Max Pending Orders: {maxPendingOrders}
            </Typography>
            <Slider
              value={maxPendingOrders}
              onChange={(e, value) => setMaxPendingOrders(value)}
              min={1}
              max={10}
              step={1}
              marks={[
                { value: 1, label: '1' },
                { value: 5, label: '5' },
                { value: 10, label: '10' }
              ]}
              valueLabelDisplay="auto"
            />
          </Box>

          <Alert severity="info" sx={{ mt: 2 }}>
            The simulation will create random purchase orders every 10-30 seconds until the maximum pending orders is reached.
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSimulationDialog(false)}>Cancel</Button>
          <Button
            onClick={handleStartSimulation}
            variant="contained"
            sx={{
              background: 'linear-gradient(45deg, #2196f3, #1976d2)',
              '&:hover': { background: 'linear-gradient(45deg, #1976d2, #1565c0)' }
            }}
          >
            Start Simulation
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

PurchaseOrders.propTypes = {
  darkMode: PropTypes.bool.isRequired
};
